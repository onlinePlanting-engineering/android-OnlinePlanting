package com.planting.online.onlineplanting.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.planting.online.onlineplanting.Entity.Converter.CommentContentConverter;
import com.planting.online.onlineplanting.Entity.Converter.UserConverter;
import com.planting.online.onlineplanting.Entity.User;
import java.util.List;

import com.planting.online.onlineplanting.Entity.Comment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMMENT".
*/
public class CommentDao extends AbstractDao<Comment, Long> {

    public static final String TABLENAME = "COMMENT";

    /**
     * Properties of entity Comment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property User = new Property(2, String.class, "user", false, "USER");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Grade = new Property(4, int.class, "grade", false, "GRADE");
        public final static Property Timestamp = new Property(5, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Parent = new Property(6, String.class, "parent", false, "PARENT");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property Object_id = new Property(8, Long.class, "object_id", false, "OBJECT_ID");
        public final static Property Reply_count = new Property(9, Long.class, "reply_count", false, "REPLY_COUNT");
        public final static Property Replies = new Property(10, String.class, "replies", false, "REPLIES");
    }

    private final UserConverter userConverter = new UserConverter();
    private final CommentContentConverter repliesConverter = new CommentContentConverter();

    public CommentDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"USER\" TEXT," + // 2: user
                "\"CONTENT\" TEXT," + // 3: content
                "\"GRADE\" INTEGER NOT NULL ," + // 4: grade
                "\"TIMESTAMP\" TEXT," + // 5: timestamp
                "\"PARENT\" TEXT," + // 6: parent
                "\"TYPE\" TEXT," + // 7: type
                "\"OBJECT_ID\" INTEGER," + // 8: object_id
                "\"REPLY_COUNT\" INTEGER," + // 9: reply_count
                "\"REPLIES\" TEXT);"); // 10: replies
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        User user = entity.getUser();
        if (user != null) {
            stmt.bindString(3, userConverter.convertToDatabaseValue(user));
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getGrade());
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(6, timestamp);
        }
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(7, parent);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        Long object_id = entity.getObject_id();
        if (object_id != null) {
            stmt.bindLong(9, object_id);
        }
 
        Long reply_count = entity.getReply_count();
        if (reply_count != null) {
            stmt.bindLong(10, reply_count);
        }
 
        List replies = entity.getReplies();
        if (replies != null) {
            stmt.bindString(11, repliesConverter.convertToDatabaseValue(replies));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        User user = entity.getUser();
        if (user != null) {
            stmt.bindString(3, userConverter.convertToDatabaseValue(user));
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindLong(5, entity.getGrade());
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(6, timestamp);
        }
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(7, parent);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        Long object_id = entity.getObject_id();
        if (object_id != null) {
            stmt.bindLong(9, object_id);
        }
 
        Long reply_count = entity.getReply_count();
        if (reply_count != null) {
            stmt.bindLong(10, reply_count);
        }
 
        List replies = entity.getReplies();
        if (replies != null) {
            stmt.bindString(11, repliesConverter.convertToDatabaseValue(replies));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Comment readEntity(Cursor cursor, int offset) {
        Comment entity = new Comment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : userConverter.convertToEntityProperty(cursor.getString(offset + 2)), // user
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.getInt(offset + 4), // grade
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timestamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // parent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // object_id
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // reply_count
            cursor.isNull(offset + 10) ? null : repliesConverter.convertToEntityProperty(cursor.getString(offset + 10)) // replies
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Comment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser(cursor.isNull(offset + 2) ? null : userConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGrade(cursor.getInt(offset + 4));
        entity.setTimestamp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setObject_id(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setReply_count(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setReplies(cursor.isNull(offset + 10) ? null : repliesConverter.convertToEntityProperty(cursor.getString(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Comment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Comment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Comment entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
