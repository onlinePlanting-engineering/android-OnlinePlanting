package com.planting.online.onlineplanting.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.planting.online.onlineplanting.Entity.Converter.ImageConverter;
import java.util.List;

import com.planting.online.onlineplanting.Entity.VegetableMeta;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEGETABLE_META".
*/
public class VegetableMetaDao extends AbstractDao<VegetableMeta, Long> {

    public static final String TABLENAME = "VEGETABLE_META";

    /**
     * Properties of entity VegetableMeta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property First_letter = new Property(3, String.class, "first_letter", false, "FIRST_LETTER");
        public final static Property Stime = new Property(4, String.class, "stime", false, "STIME");
        public final static Property Etime = new Property(5, String.class, "etime", false, "ETIME");
        public final static Property Cycle = new Property(6, int.class, "cycle", false, "CYCLE");
        public final static Property Region = new Property(7, String.class, "region", false, "REGION");
        public final static Property Output = new Property(8, Float.class, "output", false, "OUTPUT");
        public final static Property Seed_price = new Property(9, String.class, "seed_price", false, "SEED_PRICE");
        public final static Property Mature_price = new Property(10, String.class, "mature_price", false, "MATURE_PRICE");
        public final static Property Desc = new Property(11, String.class, "desc", false, "DESC");
        public final static Property Content = new Property(12, String.class, "content", false, "CONTENT");
        public final static Property Is_active = new Property(13, Boolean.class, "is_active", false, "IS_ACTIVE");
        public final static Property Imgs = new Property(14, String.class, "imgs", false, "IMGS");
    }

    private final ImageConverter imgsConverter = new ImageConverter();

    public VegetableMetaDao(DaoConfig config) {
        super(config);
    }
    
    public VegetableMetaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEGETABLE_META\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"NAME\" TEXT," + // 2: name
                "\"FIRST_LETTER\" TEXT," + // 3: first_letter
                "\"STIME\" TEXT," + // 4: stime
                "\"ETIME\" TEXT," + // 5: etime
                "\"CYCLE\" INTEGER NOT NULL ," + // 6: cycle
                "\"REGION\" TEXT," + // 7: region
                "\"OUTPUT\" REAL," + // 8: output
                "\"SEED_PRICE\" TEXT," + // 9: seed_price
                "\"MATURE_PRICE\" TEXT," + // 10: mature_price
                "\"DESC\" TEXT," + // 11: desc
                "\"CONTENT\" TEXT," + // 12: content
                "\"IS_ACTIVE\" INTEGER," + // 13: is_active
                "\"IMGS\" TEXT);"); // 14: imgs
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEGETABLE_META\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VegetableMeta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String first_letter = entity.getFirst_letter();
        if (first_letter != null) {
            stmt.bindString(4, first_letter);
        }
 
        String stime = entity.getStime();
        if (stime != null) {
            stmt.bindString(5, stime);
        }
 
        String etime = entity.getEtime();
        if (etime != null) {
            stmt.bindString(6, etime);
        }
        stmt.bindLong(7, entity.getCycle());
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(8, region);
        }
 
        Float output = entity.getOutput();
        if (output != null) {
            stmt.bindDouble(9, output);
        }
 
        String seed_price = entity.getSeed_price();
        if (seed_price != null) {
            stmt.bindString(10, seed_price);
        }
 
        String mature_price = entity.getMature_price();
        if (mature_price != null) {
            stmt.bindString(11, mature_price);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(12, desc);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
 
        Boolean is_active = entity.getIs_active();
        if (is_active != null) {
            stmt.bindLong(14, is_active ? 1L: 0L);
        }
 
        List imgs = entity.getImgs();
        if (imgs != null) {
            stmt.bindString(15, imgsConverter.convertToDatabaseValue(imgs));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VegetableMeta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String first_letter = entity.getFirst_letter();
        if (first_letter != null) {
            stmt.bindString(4, first_letter);
        }
 
        String stime = entity.getStime();
        if (stime != null) {
            stmt.bindString(5, stime);
        }
 
        String etime = entity.getEtime();
        if (etime != null) {
            stmt.bindString(6, etime);
        }
        stmt.bindLong(7, entity.getCycle());
 
        String region = entity.getRegion();
        if (region != null) {
            stmt.bindString(8, region);
        }
 
        Float output = entity.getOutput();
        if (output != null) {
            stmt.bindDouble(9, output);
        }
 
        String seed_price = entity.getSeed_price();
        if (seed_price != null) {
            stmt.bindString(10, seed_price);
        }
 
        String mature_price = entity.getMature_price();
        if (mature_price != null) {
            stmt.bindString(11, mature_price);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(12, desc);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
 
        Boolean is_active = entity.getIs_active();
        if (is_active != null) {
            stmt.bindLong(14, is_active ? 1L: 0L);
        }
 
        List imgs = entity.getImgs();
        if (imgs != null) {
            stmt.bindString(15, imgsConverter.convertToDatabaseValue(imgs));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VegetableMeta readEntity(Cursor cursor, int offset) {
        VegetableMeta entity = new VegetableMeta( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // first_letter
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // stime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // etime
            cursor.getInt(offset + 6), // cycle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // region
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // output
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // seed_price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mature_price
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // desc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // content
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // is_active
            cursor.isNull(offset + 14) ? null : imgsConverter.convertToEntityProperty(cursor.getString(offset + 14)) // imgs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VegetableMeta entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFirst_letter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEtime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCycle(cursor.getInt(offset + 6));
        entity.setRegion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOutput(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setSeed_price(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMature_price(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDesc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIs_active(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setImgs(cursor.isNull(offset + 14) ? null : imgsConverter.convertToEntityProperty(cursor.getString(offset + 14)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VegetableMeta entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VegetableMeta entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VegetableMeta entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
